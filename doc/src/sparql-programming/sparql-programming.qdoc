/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in a
** written agreement between you and Nokia.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \group database
    \title Database Classes

    \brief Database related classes, e.g. for SPARQL stores.
*/

/*!
    \page sparql-programming.html
    \title SPARQL Programming
    \ingroup qt-sparql
    \nextpage Connecting to RDF Stores

    \brief SPARQL query integration for Qt applications.

    This overview assumes that you have at least a basic knowledge of
    SPARQL. You should be able to understand simple \c SELECT, \c
    INSERT, and \c DELETE statements. Although the \l
    QSparqlQueryModel class provides an interface to database browsing
    that does not require a knowledge of SPARQL, a basic
    understanding of SPARQL is highly recommended. The definition of 
    the SPARQL query language is http://www.w3.org/TR/rdf-sparql-query/#func-isIRI and
    the proposed proposed update language http://www.w3.org/TR/sparql11-update/#t32.

    \section1 Topics:

    \list
    \o \l{Database Classes}
    \o \l{Connecting to Databases}
        \list
        \o \l{SPARQL Database Drivers}
        \endlist
    \o \l{Executing SPARQL Statements}
        \list
        \o \l{Data Types for Qt-supported Database Systems}
        \endlist
    \o \l{Using the SPARQL Model Class}
    \o \l{Presenting Data in a Table View}
    \endlist    

    \section1 Database Classes

    These classes provide access to SPARQL based RDF stores.

    \annotatedlist database

    The SPARQL classes are divided into three layers:

    \section2 Driver Layer

    This layer provides the low-level bridge between the specific databases
    and the SPARQL API layer. This layer doesn't yet have a publically 
    documented API.

    \section2 SPARQL API Layer

    These classes provide access to databases. Connections
    are made using the QSparqlConnection class. Database
    interaction is achieved by using the QSparqlQuery and QSparqlResult 
    classes.
    In addition to QSparqlConnection, QSparqlQuery and QSparqlResult, the SPARQL API
    layer is supported by QSparqlError, QSparqlBinding
    and QSparqlResultRow.

    \section2 User Interface Layer

    The QSparqlQueryModel class links the data from a store to data-aware widgets.
    It is designed to work with Qt's
    \l{Model/View Programming}{model/view framework}.

    Note that to use any of these classes, a QCoreApplication object
    must have been instantiated first.
*/

/*!
    \page sparql-connecting.html
    \title Connecting to RDF stores
    \ingroup qt-sql

    \contentspage SPARQL Programming
    \previouspage SPARQL Programming
    \nextpage Executing SPARQL Statements

    To access a database with QSparqlQuery or QSparqlQueryModel, create and
    open one or more database connections with QSparqlConnection.
    You can have multiple connections to the same database.

    Note the difference between creating a connection and opening it.
    Creating a connection involves creating an instance of class
    QSqlDatabase. The connection is not usable until it is opened. The
    following snippet shows how to create a \e{default} connection
    and then open it:

    \snippet doc/src/snippets/sparqlconnection/sparqlconnection.cpp 26

    The first line creates the connection options object, and the last line
    opens the connection for use. In between, we initialize some connection
    information, including the \l{QSparqlConnectionOptions::setDatabaseName()}
    {database name}, the \l{QSparqlConnectionOptions::setHostName()} {host name},
    the \l{QSparqlConnectionOptions::setUserName()} {user name}, and the
    \l{QSparqlConnectionOptions::setPassword()} {password}. In this case, we are
    connecting to the Virtuoso database \c{customdb} on the host
    \c{acidalia}. The \c{"QVIRTUOSO"} argument to the
    \l{QSparqlConnection::QSparqlConnection()} constructor specifies the type
    of database driver to use for the connection. The set of database
    drivers included with Qt are shown in the table of \l{SPARQL Database
    Drivers#Supported RDF Stores} {supported RDF stores}. 

    If the \l{QSparqlConnection} constructor fails, \l{QSparqlConnectionOptions::isOpenError()} 
    returns true. In that case, call QSparqlConnection::lastError() to get error information.


    Connections to an RDF Store are removed when the QSparqlConnection destructor is called.
*/

/*!
    \page sparql-sqlstatements.html
    \title Executing SPARQL Statements
    \ingroup qt-sparql
    
    \previouspage Connecting to Databases
    \contentspage SPARQL Programming
    \nextpage Using the SPARQL Model Class
    

    The QSparqlQuery class provides an interface for executing SPARQL
    statements, and QSparqlResults provides an interface for navigating 
    through the result set of a query.

    The QSparqlQueryModel class described in the
    next section provides a higher-level interface for accessing
    RDF stores. If you are unfamiliar with SPARQL, you might want to skip
    directly to the next section (\l{Using the SPARQL Model Classes}).

    \section2 Executing a Query

    To execute an SPARQL statement, simply create a QSparqlQuery object and
    call QSparqlConnection::exec() like this:

    \snippet doc/src/snippets/sparqlconnection/sparqlconnection.cpp 31

    If an error occurs, \l{QSparqlConnection::isOpenError()} returns true.
    The error is then available as QSparqlConnection::lastError().

    \section2 Navigating the Result Set

    QSparqlResult provides access to the result set one result row at a time.
    After the call to \l{QSparqlConnection::exec()}{exec()}, in the QSparqlResult
    returned, the internal pointer is located one position \e{before} the first
    result row. We must call QSparqlResult::next() once to advance to the
    first result, then \l{QSparqlResult::next()}{next()} again repeatedly
    to access the other result rows, until it returns false. Here's a
    typical loop that iterates over all the records in order:

    \snippet doc/src/snippets/sparqlconnection/sparqlconnection.cpp 32

    The QSparqlResult::value() function returns the value of a binding in
    the current result row. Bindings are specified as zero-based indexes.
    QSparqlResult::value() returns a QVariant, a type that can hold
    various C++ and core Qt data types such as \c int, QString, and
    QByteArray. The different RDF types are automatically mapped
    into the closest Qt equivalent. In the code snippet, we call
    QVariant::toString() and QVariant::toInt() to convert
    variants to QString and \c int.

    You can iterate back and forth using QSparqlResult::next(),
    QSparqlResult::previous(), QSparqlResult::first(), QSparqlResult::last(), and
    QSparqlResult::seek(). The current row index is returned by
    QSparqlResult::pos(), and the total number of rows in the result set
    is avaliable as QSparqlResult::size() for stores that support it.

    To determine whether a database driver supports a given feature,
    use QSparqlConnection::hasFeature(). In the following example, we call
    QSparqlResult::size() to determine the size of a result set of
    the underlying database supports that feature; otherwise, we
    navigate to the last result row and use the query's position to tell
    us how many result rows there are.

    \snippet doc/src/snippets/sparqlconnection/sparqlconnection.cpp 33

    \section2 Inserting, Updating, and Deleting RDF data

    QSparqlQuery can execute arbitrary SPARQL statements, not just
    \c{SELECT}s. The following example inserts data
    using \c{INSERT}:

    \snippet doc/src/snippets/sparqlconnection/sparqlconnection.cpp 34

    Updating data is performed with a combination of DELETE and INSERT 
    statements:

    \snippet doc/src/snippets/sparqlconnection/sparqlconnection.cpp 37

    You can also use named or positional binding to associate
    parameters to actual values.

    Finally, here's an example of a \c DELETE statement:

    \snippet doc/src/snippets/sparqlconnection/sparqlconnection.cpp 38

*/

/*!
    \page sparql-model.html
    \title Using the SPARQL Model Classes
    \ingroup qt-sparql
    
    \previouspage Executing SPARQL Statements
    \contentspage SPARQL Programming
    \nextpage Presenting Data in a Table View

    In addition to QSparqlQuery/QSparqlResult, Qt offers QSparqlQueryModel 
    as a higher-level class for accessing RDF Stores. It provides a 
    read-only model based on an arbitrary SPARQL query.

    The class is derived from QAbstractTableModel (which in turn
    inherits from QAbstractItemModel) and make it easy to present
    data from a store in an item view class such as QListView and
    QTableView. This is explained in detail in the \l{Presenting Data
    in a Table View} section.

    Another advantage of using this class is that it can make your
    code easier to adapt to other data sources. For example, if you
    use QSparqlQueryModel and later decide to use XML files to store
    data instead of a database, it is essentially just a matter of
    replacing one data model with another.

    \section2 The SPARQL Query Model

    QSparqlQueryModel offers a read-only model based on a SPARQL query.

    Example:

    \snippet doc/src/snippets/sparqlconnection/sparqlconnection.cpp 40

    After setting the query using QSparqlQueryModel::setQuery(), you can
    use QSparqlQueryModel::resultRow(int) to access the individual result rows.
    You can also use QSparqlQueryModel::data() and any of the other
    functions inherited from QAbstractItemModel.

*/

/*!
    \page sparql-presenting.html
    \title Presenting Data in a Table View
    \ingroup qt-sparql
    
    \previouspage Using the SPARQL Model Classes
    \contentspage SPARQL Programming
    \nextpage Creating Data-Aware Forms

    The QSparqlQueryModel class can be used as a data source for Qt's view classes such
    as QListView, QTableView, and QTreeView. In practice, QTableView
    is by far the most common choice, because a SPARQL result set is
    essentially a two-dimensional data structure.

    \image relationaltable.png A table view displaying a QSparqlTableModel

    The following example creates a view based on an SPARQL data model:

    \snippet doc/src/snippets/sparqlconnection/sparqlconnection.cpp 17
    \snippet doc/src/snippets/sparqlconnection/sparqlconnection.cpp 18
    \snippet doc/src/snippets/sparqlconnection/sparqlconnection.cpp 19

    View classes display a header at the top to label the columns. To
    change the header texts, call
    \l{QAbstractItemModel::setHeaderData()}{setHeaderData()} on the
    model. The header's labels default to the query's variable names.
    For example:

    \snippet examples/sql/relationaltablemodel/relationaltablemodel.cpp 3

    QTableView also has a vertical header on the left with numbers
    identifying the rows.

    The items in the view are rendered using a delegate. The default
    delegate, QItemDelegate, handles the most common data types (\c
    int, QString, QImage, etc.). You can create your own delegates by
    subclassing QAbstractItemDelegate or QItemDelegate. See
    \l{Model/View Programming} for more information.

    If you need a read-write model that operates on an
    arbitrary result set, you can subclass QSparqlQueryModel and
    reimplement \l{QAbstractItemModel::flags()}{flags()} and
    \l{QAbstractItemModel::setData()}{setData()} to make it
    read-write. The following two functions make fields 1 and 2 of a
    query model editable:

    \snippet examples/sql/querymodel/editablesqlmodel.cpp 0
    \codeline
    \snippet examples/sql/querymodel/editablesqlmodel.cpp 1

    The setFirstName() helper function is defined as follows:

    \snippet examples/sql/querymodel/editablesqlmodel.cpp 2

    The setLastName() function is similar. See the
    \l{sql/querymodel}{Query Model} example for the complete source code.

    Subclassing a model makes it possible to customize it in many
    ways: You can provide tooltips for the items, change the
    background color, provide calculated values, provide different
    values for viewing and editing, handle null values specially, and
    more. See \l{Model/View Programming} as well as the \l
    QAbstractItemView reference documentation for details.
*/

